import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/`;

const prod = process.argv[2] === "production";

const includePackages = [
  "fs-extra",
  "pdf-lib",
  "pdf-parse",
  "pdf2pic",
  "pdfjs-dist",
  "text-from-image"
];

const external = [
  "obsidian",
  "electron",
  ...builtins,
  "@codemirror/autocomplete",
  "@codemirror/collab",
  "@codemirror/commands",
  "@codemirror/language",
  "@codemirror/lint",
  "@codemirror/search",
  "@codemirror/state",
  "@codemirror/view",
  "@lezer/common",
  "@lezer/highlight",
  "@lezer/lr",
].filter(pkg => !includePackages.includes(pkg));

const copyPdfWorker = async () => {
  const src = path.resolve("node_modules/pdfjs-dist/build/pdf.worker.mjs");
  const destDir = path.resolve("assets");
  const dest = path.resolve(destDir, "pdf.worker.js");

  // Ensure assets directory exists
  await fs.mkdir(destDir, { recursive: true });
  // Copy and rename file
  await fs.copyFile(src, dest);
  console.log(`Copied and renamed pdf.worker.mjs to assets/pdf.worker.js`);
};

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external,
  platform: "browser",
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
  minify: prod,
});

if (prod) {
  await context.rebuild();
  await copyPdfWorker();  // Copy after build
  process.exit(0);
} else {
  await context.watch();
  // Optionally copy at start or watch for changes if needed
  await copyPdfWorker();
}

import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the GitHub repository of this plugin.
*/`;

// USAGE:
// default (no flags): production build to dist folder with manifest copy
// dev mode (watch): node esbuild.config.mjs --dev
// dev mode, output to root: node esbuild.config.mjs --dev --no-dist
// production build to root without manifest copy: node esbuild.config.mjs --no-dist --no-copy-manifest

const hasFlag = (flag) => process.argv.some(arg => arg === flag);

const dev = hasFlag("--dev");
const useDist = !hasFlag("--no-dist");
const copyManifestFlag = !hasFlag("--no-copy-manifest");

const includePackages = [
  "fs-extra",
  "pdf-lib",
  "pdf-parse",
  "pdf2pic",
  "pdfjs-dist",
  "text-from-image"
];

const external = [
  "obsidian",
  "electron",
  ...builtins,
  "@codemirror/autocomplete",
  "@codemirror/collab",
  "@codemirror/commands",
  "@codemirror/language",
  "@codemirror/lint",
  "@codemirror/search",
  "@codemirror/state",
  "@codemirror/view",
  "@lezer/common",
  "@lezer/highlight",
  "@lezer/lr",
].filter(pkg => !includePackages.includes(pkg));

const distDir = path.resolve("dist");
const outputDir = useDist ? distDir : path.resolve(".");
const manifestSrc = path.resolve("manifest.json");

const copyPdfWorker = async () => {
  const src = path.resolve("node_modules/pdfjs-dist/build/pdf.worker.mjs");
  const dest = path.join(outputDir, "pdf.worker.js");

  await fs.mkdir(outputDir, { recursive: true });
  await fs.copyFile(src, dest);
  console.log(`Copied pdf.worker.mjs to ${path.relative(process.cwd(), dest)}`);
};

const copyManifest = async () => {
  if (!copyManifestFlag) {
    console.log("Skipping manifest.json copy due to --no-copy-manifest flag.");
    return;
  }
  if (!useDist) {
    console.log("Skipping manifest.json copy because output is not 'dist/' folder.");
    return;
  }

  const dest = path.join(distDir, "manifest.json");
  await fs.copyFile(manifestSrc, dest);
  console.log(`Copied manifest.json to dist/manifest.json`);
};

const build = async () => {
  const context = await esbuild.context({
    banner: { js: banner },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external,
    platform: "browser",
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: dev ? "inline" : false,
    treeShaking: true,
    outfile: path.join(outputDir, "main.js"),
    minify: !dev,
  });

  if (dev) {
    await context.watch();
    await copyPdfWorker();
    await copyManifest();
    console.log("Watching for changes...");
  } else {
    await context.rebuild();
    await copyPdfWorker();
    await copyManifest();
    console.log("Build complete.");
    process.exit(0);
  }
};

build().catch(err => {
  console.error(err);
  process.exit(1);
});
